name: FTH Gold System CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  FOUNDRY_PROFILE: ci

jobs:
  check:
    strategy:
      fail-fast: true

    name: Foundry project
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ github.token }}

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Show Forge version
        run: |
          forge --version

      - name: Run Forge fmt check
        run: |
          forge fmt --check
        id: fmt
        continue-on-error: true

      - name: Run Forge build
        run: |
          forge build --sizes
        id: build

      - name: Run Forge tests
        run: |
          forge test -vvv
        id: test

      - name: Run Forge coverage
        run: |
          forge coverage --report lcov
        id: coverage
        
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./lcov.info
          flags: smart-contracts

  gas-diff:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ github.token }}

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Generate gas snapshots
        run: forge snapshot --check --tolerance 5
        continue-on-error: true

  slither-analyze:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Run Slither
        uses: crytic/slither-action@v0.3.0
        id: slither
        with:
          node-version: 18
          fail-on: none
          sarif: results.sarif

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.slither.outputs.sarif }}

  echidna-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ github.token }}

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Install Echidna
        run: |
          wget https://github.com/crytic/echidna/releases/download/v2.2.1/echidna-2.2.1-Ubuntu-20.04.tar.gz
          tar -xzf echidna-2.2.1-Ubuntu-20.04.tar.gz
          sudo mv echidna /usr/local/bin/

      - name: Build contracts first
        run: |
          forge build

      - name: Run Echidna tests
        run: |
          echidna . --config echidna.yaml --workers 4
        continue-on-error: true

  security-review:
    runs-on: ubuntu-latest
    needs: [check, slither-analyze]
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Security Review Checklist
        run: |
          echo "ðŸ”’ Security Review Required:"
          echo "- [ ] Reentrancy guards on all value transfers"
          echo "- [ ] Multi-sig controls for privileged operations" 
          echo "- [ ] Oracle staleness and deviation checks"
          echo "- [ ] Coverage ratio enforcement"
          echo "- [ ] Emergency pause mechanisms"
          echo "- [ ] Timelock on critical parameter changes"
          echo "- [ ] Role separation (no single key for mint+redeem)"
          echo "- [ ] Input validation and bounds checking"

  deploy-testnet:
    runs-on: ubuntu-latest
    needs: [check, gas-diff, slither-analyze]
    if: github.ref == 'refs/heads/main'
    environment: testnet
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ github.token }}

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Build contracts
        run: |
          forge build

      - name: Deploy to Sepolia
        run: |
          forge script script/Deploy.s.sol --rpc-url ${{ secrets.SEPOLIA_RPC_URL }} --private-key ${{ secrets.DEPLOYER_PRIVATE_KEY }} --broadcast --verify --etherscan-api-key ${{ secrets.ETHERSCAN_API_KEY }}
        env:
          ADMIN_MULTISIG: ${{ secrets.TESTNET_ADMIN_MULTISIG }}
          TREASURY_ADDRESS: ${{ secrets.TESTNET_TREASURY }}
          
      - name: Run Integration Tests
        run: |
          forge script script/IntegrationTest.s.sol --rpc-url ${{ secrets.SEPOLIA_RPC_URL }} --private-key ${{ secrets.DEPLOYER_PRIVATE_KEY }}
        continue-on-error: true